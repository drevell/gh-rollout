# Builds a container image using skaffold and uploads it to Artifact Registry, tagged with the
# current SHA.
#
# Requires:
#  - Caller must declare the id-token write permission, for example:
#       permissions:
#         id-token: write
#  - There must be these variables configured at the org or repo leve;:
#    - gar_location: the region containing the Artifact Registry, e.g. "us-west1", "us" 
#    - _id: the name of the repo within Artifact Registry, e.g. my-container-images
#    - infra_project_id: the project ID of the project containing Artifact Registry
#    - wif_provider: e.g. projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
#    - wif_service_account: e.g. my-service-account@my-project.iam.gserviceaccount.com
#    - TODO

name: Build and upload

on:
  workflow_call:
  # workflow_dispatch:

jobs:
  build-and-upload:
    name: Build and upload container image
    # outputs: 
    #   built-version: '${{ steps.docker_push.built-version }}'
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    concurrency: 'build-of-${{ github.sha }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: actions/setup-go@v4
      with:
        go-version: '>=1.20.0'

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: '${{ vars.wif_provider }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
        service_account: '${{ vars.wif_service_account }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    # Authenticate Docker to Google Cloud Artifact Registry
    - name: Docker Auth
      id: docker-auth
      uses: 'docker/login-action@v2'
      with:
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'
        registry: '${{ vars.gar_location }}-docker.pkg.dev'

    # goreleaser requires a tag to publish images to container registry.
    # We create a local tag to make it happy.
    - name: 'Apply local tag to allow goreleaser to push'
      run: |-
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git tag -f `date "+%Y%m%d%H%M%S"`

    - name: Goreleaser build
      uses: 'goreleaser/goreleaser-action@v4.2.0' # TODO ratchet
      with:
        args: 'release -f .goreleaser.docker.yaml --clean --skip-validate'
      env:
        REGISTRY: '${{ vars.gar_location }}-docker.pkg.dev/${{ vars.infra_project_id}}/${{ vars.gar_repo_id}}'
        DOCKER_TAG: '${{ github.sha }}'

    # - name: Docker push
    #   id: docker_push
    #   run: |-
    #     BUILT_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^${{ vars.gar_location }}-docker.pkg.dev/${{ vars.infra_project_id}}/${{ vars.gar_repo_id}}/" | head -n 1)
    #     echo "BUILT_IMAGE is $BUILT_IMAGE"
    #     docker push $BUILT_IMAGE || exit
    #     echo "::set_output name=built-version::${BUILT_IMAGE}"
        
