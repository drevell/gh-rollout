name: Deploy to staging/prod

on:
  workflow_dispatch:
  schedule:
    - cron: '50 11 * * * ' # Daily early morning push, in UTC.

jobs:
  wait-for-build:
    # If there's a build in progress for this SHA, wait for it. We can't deploy it to staging until
    # it's actually built. This concurrency value is shared with the build step. We assume that the
    # build will run first before this workflow, because it's initiated automatically and
    # immediately when a PR is merged. Whereas this workflow will probably run later. Maybe this
    # assumption is sketchy.
    concurrency: 'build-of-${{ github.sha }}'
    runs-on: ubuntu-latest

    steps:
    - name: No-op
      run: echo "This is a noop step that just waits for the build to finish"

  call-deploy-staging:
    needs: wait-for-build

    # Only one staging deployment should be in flight at a time.
    concurrency: staging-mutex

    name: 'Deploy to staging'
    uses: './.github/workflows/reusable-cloudrun-deploy.yml'
    permissions:
      id-token: 'write'
    with:
      environment_: 'staging'
    secrets: inherit
    
  staging-tests:
    name: Prerelease tests
    needs: call-deploy-staging
    runs-on: ubuntu-latest
    steps:
    - name: "Prerelease tests"
      run: "echo TODO some tests"

  # TODO think about rollbacks. Perhaps apply a tag to a release after it's approved but before
  # it's released? We'd need a new step that only gathers approval, then tag, then release to prod.
  # Tagging example: https://stackoverflow.com/questions/60963759/use-github-actions-to-create-a-tag-but-not-a-release.
  # Then the rollback workflow is just "select a tagged release to which you want to roll back".

  # TODO: add gradual rollouts and traffic splitting

  # The GitHub environment will protect this by requiring human approval.
  call-deploy-prod:
    needs: staging-tests
    concurrency: prod-mutex # Only one prod deployment should be in flight at a time.

    name: 'Deploy to prod'
    uses: './.github/workflows/reusable-cloudrun-deploy.yml'
    permissions:
      id-token: 'write'
    with:
      environment_: 'prod'
    secrets: inherit